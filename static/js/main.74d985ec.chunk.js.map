{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","Helpers/getIsValidUrl.ts","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","Helpers/getIsButtonDisabled.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getIsValidUrl","value","isMatched","match","Boolean","TextField","name","label","placeholder","required","onChange","id","Math","random","toFixed","slice","useState","touched","setTouched","hasError","toLowerCase","includes","handleOnChange","event","target","htmlFor","type","classNames","onBlur","onFocus","length","defaultFormValue","NewMovie","onAdd","count","setCount","formValues","setFormValues","isButtonDisabled","formValue","getIsButtonDisabled","key","prevValues","trimStart","onClick","prev","disabled","App","moviesFromServer","moviesList","setMoviesList","prevList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.74d985ec.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","export const getIsValidUrl = (value: string) => {\n  /* eslint max-len: [\"error\",  { \"ignoreRegExpLiterals\": true }] */\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/g;\n  const isMatched = value.match(pattern);\n\n  return Boolean(isMatched);\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { getIsValidUrl } from '../../Helpers';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange,\n}) => {\n  const id = `${name}-${getRandomDigits()}`;\n\n  const [touched, setTouched] = useState(false);\n\n  const hasError = name.toLowerCase().includes('url')\n    ? touched && required && !getIsValidUrl(value)\n    : touched && required && !value;\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event);\n\n    if (event.target.value === '') {\n      setTouched(false);\n    }\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          name={name}\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => handleOnChange(event)}\n          onBlur={() => setTouched(true)}\n          onFocus={() => setTouched(false)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">\n          {value.length === 0 ? (\n            `${label} is required`\n          ) : (\n            `${label} contains an invalid URL`\n          )}\n        </p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { getIsButtonDisabled, getIsValidUrl } from '../../Helpers';\n\ntype Props = {\n  onAdd: (movie: Movie) => void\n};\n\nconst defaultFormValue: Movie = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [formValues, setFormValues] = useState(defaultFormValue);\n  const isButtonDisabled = getIsButtonDisabled(formValues)\n    || !getIsValidUrl(formValues.imdbUrl)\n    || !getIsValidUrl(formValues.imgUrl);\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const key = event.target.name;\n\n    setFormValues(prevValues => ({\n      ...prevValues,\n      [key]: event.target.value.trimStart(),\n    }));\n  };\n\n  const handleAddMovie = () => {\n    onAdd(formValues);\n    setCount(prev => prev + 1);\n    setFormValues(defaultFormValue);\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={formValues.title}\n        onChange={handleOnChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={formValues.description}\n        onChange={handleOnChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={formValues.imgUrl}\n        onChange={handleOnChange}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={formValues.imdbUrl}\n        onChange={handleOnChange}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={formValues.imdbId}\n        onChange={handleOnChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            onClick={handleAddMovie}\n            disabled={isButtonDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Movie } from '../types/Movie';\n\nexport const getIsButtonDisabled = (formValue: Movie) => {\n  const {\n    title,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  } = formValue;\n\n  return !title || !imdbUrl || !imgUrl || !imdbId;\n};\n","import { useState } from 'react';\n\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [moviesList, setMoviesList] = useState<Movie[]>(moviesFromServer);\n\n  const handleButtonAddMovie = (movie: Movie) => {\n    setMoviesList(prevList => [...prevList, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesList} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={handleButtonAddMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}